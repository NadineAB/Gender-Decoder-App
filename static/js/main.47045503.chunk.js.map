{"version":3,"sources":["Components/addJob/equality-people.png","Components/addJob/AddJob.js","Components/viewJob/ViewJob.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddJob","React","useState","content","setContent","output","setOutput","className","src","eqIcon","alt","noValidate","id","name","placeholder","onChange","event","target","value","onClick","preventDefault","toInput","trim","length","axios","method","url","data","text","then","res","console","log","result","wordArray","split","genderMapArray","genderMap","toOutput","countFeminine","countMasculine","map","word","index","style","key","status","ViewJob","updateData","isLoading","useEffect","type","color","height","width","aria-label","row","align","App","to","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47045503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/equality-people.b06413fe.png\";","import React from \"react\";\nimport './addJob.css';\nimport eqIcon from './equality-people.png'\nimport axios from 'axios';\n\nexport default function AddJob() {\n  const [content, setContent] = React.useState(\"\");\n  const [output, setOutput] = React.useState(\"\");\n\n  const handleContentChange = event => setContent(event.target.value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const toInput = { content };\n\n    if (toInput.content.trim().length === 0) {\n      setOutput(\"Empty text.\")\n    } else {\n      axios({\n        method: 'post',\n        url: '/texts',\n        data: {\n          text: toInput.content,\n        }\n      }).then(res => {\n        console.log(res);\n        setOutput(res.status === 200 ? \"Job ad successfully added\" : \"Job ad failed\");\n      });\n    }\n  };\n\n  const handleAnalyze = event => {\n    event.preventDefault();\n    const toInput = { content };\n\n    if (toInput.content.trim().length === 0) {\n      setOutput(\"Empty text.\")\n    } else {\n      axios({\n        method: 'post',\n        url: '/analyze',\n        data: {\n          text: toInput.content,\n        }\n      }).then(res => {\n        console.log(res);\n        const result = res.data;\n        const wordArray = result.text.split(\" \");\n        const genderMapArray = result.genderMap.split('');\n        let toOutput = \"This job ad is neutral.\";\n        if (result.countFeminine > 0 || result.countMasculine > 0) {\n          toOutput = wordArray.map((word, index) => {\n            const style = genderMapArray[index];\n            return (\n              <mark className={style} key={index}>{word} </mark>\n            );\n          });\n        }\n        console.log(toOutput);\n        setOutput(res.status === 200 ? toOutput : \"Text analysis failed\");\n      });\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"box\">\n          <img src={eqIcon} alt=\"Equality icon\" className=\"icon\" />\n        </div>\n        <div className=\"box\">\n          <form className=\"form\" noValidate>\n            <textarea id=\"ad\" name=\"ad\"\n              placeholder=\"Paste your job ad here\"\n              onChange={handleContentChange} />\n            <button className=\"button\" onClick={handleAnalyze}>\n              Analyze\n              </button>\n            <button className=\"button\" onClick={handleSubmit}>\n              Save\n              </button>\n          </form>\n        </div>\n        <div className=\"box\">\n          <p>{output}</p>\n        </div>\n      </div>\n    </div>\n  );\n}","import React, {useEffect} from \"react\";\nimport './viewJob.css';\nimport Loader from 'react-loader-spinner';\nimport axios from 'axios';\n\nexport default function ViewJob() {\n  const [data, updateData] = React.useState([]);\n\n  let isLoading = true;\n\n  useEffect(()=>{\n    axios({\n      method: 'get',\n      url: '/texts',\n    }).then(res=>{\n      console.log(res);\n      updateData(res.data)\n    });\n  },[]);\n\n  if (data.length > 0) isLoading = false;\n\n  return (\n    <div className=\"container\">\n      {isLoading ? (\n        <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n      ) : (\n          <table className=\"table\" aria-label=\"Table\">\n            <thead>\n              <tr>\n                <th>Job Ads</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data?.map(row => (\n                <tr key={row.id}>\n                  <td align=\"left\">{row.text}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n      )}\n    </div>\n  );\n}","import React, { Component } from \"react\";\nimport AddJob from \"./Components/addJob/AddJob\";\nimport {Link, Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport ViewJob from \"./Components/viewJob/ViewJob\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <h1 className=\"header\">Gender-decoder application</h1>\n          <nav className=\"topnav\">\n              <Link to={'/'} className=\"nav-link\">Add Job </Link>\n              <Link to={'/view'} className=\"nav-link\">View Jobs</Link>\n          </nav>\n          <Switch>\n              <Route exact path='/' component={AddJob} />\n              <Route path='/view' component={ViewJob} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}